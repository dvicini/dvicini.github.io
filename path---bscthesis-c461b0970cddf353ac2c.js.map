{"version":3,"sources":["webpack:///path---bscthesis-c461b0970cddf353ac2c.js","webpack:///./.cache/json/bscthesis.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/bscthesis.json","module","exports","data","projectsJson","name","abstract","authors","published","year","url","slides","teaser","teasercaption","pdf","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,mEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,cAAgBC,KAAA,2FAAAC,SAAA,yiCAAAC,UAAsqCF,KAAA,iBAAsBG,UAAA,sCAAAC,KAAA,OAAAC,IAAA,YAAAC,OAAA,yBAAAC,OAAA,KAAAC,cAAA,KAAAC,IAAA,0BAAwLC,aAAgBC,KAAA","file":"path---bscthesis-c461b0970cddf353ac2c.js","sourcesContent":["webpackJsonp([212004822331860],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/bscthesis.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"projectsJson\":{\"name\":\"Image Filtering using Halide and a new Denoising Algorithm for Gradient-Domain Rendering\",\"abstract\":\"In this thesis, we implemented two state-of-the-art denoising algorithms using Halide [RKAP+12]. Halide is a domain-specific programming language for high performance image processing. We implemented both \\\"Robust Denoising using Feature and Color information\\\" [RMZ13] and \\\"Dual-Domain Image Denoising\\\" [KZ15] using Halide. Our implementations on the GPU are faster than the preexisting code provided by the respective authors. Furthermore, we present a new denoising algorithm for gradient-domain rendering [LKL+13]. Gradient-domain rendering algorithms compute not only a Monte Carlo estimate of the image itself, but also of its finite difference gradients. The final image is then reconstructed by solving a screened Poisson equation. Our denoising algorithm extends the Poisson problem by adding regularization constraints based on local feature patches. We also present an efficient implementation of our algorithm using CUDA and compare it to the existing biased L1-reconstruction for gradient-domain rendering, which we outperform by a significant factor.\",\"authors\":[{\"name\":\"Delio Vicini\"}],\"published\":\"Bachelor Thesis, University of Bern\",\"year\":\"2015\",\"url\":\"bscthesis\",\"slides\":\"vicini_bsc_thesis.pptx\",\"teaser\":null,\"teasercaption\":null,\"pdf\":\"vicini_bsc_thesis.pdf\"}},\"pathContext\":{\"slug\":\"bscthesis\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---bscthesis-c461b0970cddf353ac2c.js","module.exports = {\"data\":{\"projectsJson\":{\"name\":\"Image Filtering using Halide and a new Denoising Algorithm for Gradient-Domain Rendering\",\"abstract\":\"In this thesis, we implemented two state-of-the-art denoising algorithms using Halide [RKAP+12]. Halide is a domain-specific programming language for high performance image processing. We implemented both \\\"Robust Denoising using Feature and Color information\\\" [RMZ13] and \\\"Dual-Domain Image Denoising\\\" [KZ15] using Halide. Our implementations on the GPU are faster than the preexisting code provided by the respective authors. Furthermore, we present a new denoising algorithm for gradient-domain rendering [LKL+13]. Gradient-domain rendering algorithms compute not only a Monte Carlo estimate of the image itself, but also of its finite difference gradients. The final image is then reconstructed by solving a screened Poisson equation. Our denoising algorithm extends the Poisson problem by adding regularization constraints based on local feature patches. We also present an efficient implementation of our algorithm using CUDA and compare it to the existing biased L1-reconstruction for gradient-domain rendering, which we outperform by a significant factor.\",\"authors\":[{\"name\":\"Delio Vicini\"}],\"published\":\"Bachelor Thesis, University of Bern\",\"year\":\"2015\",\"url\":\"bscthesis\",\"slides\":\"vicini_bsc_thesis.pptx\",\"teaser\":null,\"teasercaption\":null,\"pdf\":\"vicini_bsc_thesis.pdf\"}},\"pathContext\":{\"slug\":\"bscthesis\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/bscthesis.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/bscthesis.json\n// module chunks = 212004822331860"],"sourceRoot":""}